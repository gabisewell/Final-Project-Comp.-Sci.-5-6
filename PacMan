#include <SFML/Graphics.hpp>
#include <iostream>
#include <time.h>
#include <math.h>
#include <sstream>

using namespace std;
using namespace sf;

void Board (RenderWindow &, int[31][28]);
void Score (RenderWindow &,int, Text &);
void timer(RenderWindow & , bool);

class Ghosts
{
    public:
    int xg ; // x position in screen...draw stuff based off of me!
    int yg;
    //void moveme(int , int);
    int r;
    int g;
    int b;
    int ig;  // x position in matrix...locate stuff based off of me!
    int jg;
    Sprite sprite;
    void Build(RenderWindow & );

};

int main()
{

    srand(time(NULL));
    int x = 1;
    int y = 1;
    int rad = 20;
    int scorecounter = 0;
    int direction = rand()%4+1;
    int mx = 0;
    int my = 0;
    int counter = 0;
    bool scatter;

    Ghosts GhostP[4];

    GhostP[0].r = 0;
    GhostP[1].r = 255;
    GhostP[2].r = 0;
    GhostP[3].r = 0;

    GhostP[0].g = 255;
    GhostP[1].g = 102;
    GhostP[2].g = 0;
    GhostP[3].g = 255;

    GhostP[0].b = 0;
    GhostP[1].b = 163;
    GhostP[2].b = 255;
    GhostP[3].b = 255;

    GhostP[0].xg = 335;
    GhostP[1].xg = 375;
    GhostP[2].xg = 415;
    GhostP[3].xg = 455;

     GhostP[0].yg = 400;
     GhostP[1].yg = 400;
     GhostP[2].yg = 400;
     GhostP[3].yg = 400;


    GhostP[0].ig = 335/30;
    GhostP[1].ig = 375/30;
    GhostP[2].ig = 415/30;
    GhostP[3].ig = 455/30;

     GhostP[0].jg = 400/30;
     GhostP[1].jg = 400/30;
     GhostP[2].jg = 400/30;
     GhostP[3].jg = 400/30;


    RenderWindow window(VideoMode(840, 930), "PAC-MAN!");

    CircleShape pacman(10.f);
    pacman.setPosition(35,35);
    pacman.setFillColor(Color::Yellow);

    CircleShape mouth(9,3);
    mouth.setPosition(42,54);
    mouth.rotate(270);
    mouth.setFillColor(Color::Black);

    int matrix[31][28] =
    {
        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1},
        {1,2,1,1,1,1,0,1,1,1,1,1,0,1,1,0,1,1,1,1,1,0,1,1,1,1,2,1},
        {1,0,1,1,1,1,0,1,1,1,1,1,0,1,1,0,1,1,1,1,1,0,1,1,1,1,0,1},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
        {1,0,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,0,1},
        {1,0,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,0,1},
        {1,0,0,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,1},
        {1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1},
        {3,3,3,3,3,1,0,1,1,1,1,1,0,1,1,0,1,1,1,1,1,0,1,3,3,3,3,3},
        {3,3,3,3,3,1,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,1,3,3,3,3,3},
        {3,3,3,3,3,1,0,1,1,0,1,1,1,5,5,1,1,1,0,1,1,0,1,3,3,3,3,3},
        {1,1,1,1,1,1,0,1,1,0,1,5,5,5,5,5,5,1,0,1,1,0,1,1,1,1,1,1},
        {0,0,0,0,0,0,0,0,0,0,1,5,5,5,5,5,5,1,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,1,1,1,0,1,1,0,1,5,5,5,5,5,5,1,0,1,1,0,1,1,1,1,1,1},
        {3,3,3,3,3,1,0,1,1,0,1,1,1,1,1,1,1,1,0,1,1,0,1,3,3,3,3,3},
        {3,3,3,3,3,1,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,1,3,3,3,3,3},
        {3,3,3,3,3,1,0,1,1,0,1,1,1,1,1,1,1,1,0,1,1,0,1,3,3,3,3,3},
        {1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1},
        {1,0,1,1,1,1,0,1,1,1,1,1,0,1,1,0,1,1,1,1,1,0,1,1,1,1,0,1},
        {1,0,1,1,1,1,0,1,1,1,1,1,0,1,1,0,1,1,1,1,1,0,1,1,1,1,0,1},
        {1,2,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,2,1},
        {1,1,1,0,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0,1,1,0,1,1,0,1,1,1},
        {1,1,1,0,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0,1,1,0,1,1,0,1,1,1},
        {1,0,0,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,1},
        {1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1},
        {1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
        {3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3}
    };

  //0 = black w/ small dot 2 = black w/ big dot 3 = plain black not ok to go on
  //4 = plain black ok to go on 5 = black only ghost 1 = blue dont go
    Font font;
    if (!font.loadFromFile("AGENCYB.TTF"))
       cout << "error loading font\n" ;

    Text text;
    text.setFont(font);
    text.setCharacterSize(15);
    text.setColor(Color::White);
    text.setPosition(800,900);

    while (window.isOpen())
    {
        Event event;
        while (window.pollEvent(event))
        {
             if (event.type == Event::Closed)
                 window.close();

              if(Keyboard::isKeyPressed(Keyboard::Left))
              {
                  if (x == 0 && y == 13)
                  {
                      mouth.move(810,0);
                      pacman.move(810,0);
                      x = 27;
                      y = 13;
                  }

                 else if (matrix[y][x-1]== 0 or matrix[y][x-1] == 2 or matrix[y][x-1] == 4)
                 {
                    mouth.move(-30,0);
                    pacman.move(-30,0);
                    x--;

                    if (matrix[y][x] == 0)
                     {
                         matrix[y][x] = 4;
                         scorecounter = scorecounter+10;
                     }
                     else if (matrix[y][x] == 2)
                     {
                         matrix[y][x] = 4;
                         scorecounter = scorecounter+50;
                     }
                 }
             }
             if(Keyboard::isKeyPressed(Keyboard::Right))
             {
                 if (x == 27 && y == 13)
                  {
                      mouth.move(-810,0);
                      pacman.move(-810,0);
                      x = 0;
                      y = 13;
                  }

                 if(matrix[y][x+1]== 0 or matrix[y][x+1] == 2 or matrix[y][x+1] == 4)
                 {
                     mouth.move(30,0);
                     pacman.move(30,0);
                     x++;

                    if (matrix[y][x] == 0)
                     {
                         matrix[y][x] = 4;
                         scorecounter = scorecounter+10;
                     }
                     if (matrix[y][x] == 2)
                     {
                         matrix[y][x] = 4;
                         scorecounter = scorecounter+50;
                     }
                 }
             }
             if(Keyboard::isKeyPressed(Keyboard::Up))
             {
                 if(matrix[y-1][x]== 0 or matrix[y-1][x] == 2 or matrix[y-1][x] == 4)
                 {
                     mouth.move(0,-30);
                     pacman.move(0,-30);
                     y--;

                    if (matrix[y][x] == 0)
                     {
                         matrix[y][x] = 4;
                         scorecounter = scorecounter+10;
                     }
                     if (matrix[y][x] == 2)
                     {
                         matrix[y][x] = 4;
                         scorecounter = scorecounter+50;
                     }
                 }
             }
             if(Keyboard::isKeyPressed(Keyboard::Down))
             {
                 if(matrix[y+1][x]== 0 or matrix[y+1][x] == 2 or matrix[y+1][x] == 4)
                 {
                      mouth.move(0,30);
                      pacman.move(0,30);
                      y++;

                    if (matrix[y][x] == 0)
                     {
                         matrix[y][x] = 4;
                         scorecounter = scorecounter+10;
                     }
                     if (matrix[y][x] == 2)
                     {
                         matrix[y][x] = 4;
                         scorecounter = scorecounter+50;
                     }
                 }
             }

             //ghosts movement
             //direction 1 = up 2 = right 3 = down 4 = left
for(int i = 0; i < 4; i++)
{
    if(direction == 4 )
              {
                    if (GhostP[i].ig == 0 && GhostP[i].jg == 13)
                                {
                                    GhostP[i].sprite.move(810,0);
                                    GhostP[i].ig = 27 ;
                                    GhostP[i].jg = 13 ;
                                }
                        if (matrix[y][x-1]== 0 or matrix[y][x-1] == 2 or matrix[y][x-1] == 4 or matrix[y][x-1] == 5)
                                {
                                    GhostP[i].sprite.move(-30,0);
                                    GhostP[i].ig--;
                                }
                        else
                        {
                             direction = rand()%4+1;
                        }
             }

        if(direction == 2 )
             {

                     if (GhostP[i].ig == 27 && GhostP[i].jg == 13)
                        {
                            GhostP[i].sprite.move(-812,0);
                            GhostP[i].ig = 0;
                            GhostP[i].jg = 13;
                         }
                if(matrix[y][x+1]== 0 or matrix[y][x+1] == 2 or matrix[y][x+1] == 4 or matrix[y][x+1] == 5)
                 {
                        GhostP[i].sprite.move(30,0);
                        GhostP[i].ig++;
                 }

                else
                 {
                      direction = rand()%4+1;
                 }

            }


        if(direction == 1 )
             {
                    if(matrix[y-1][x]== 0 or matrix[y-1][x] == 2 or matrix[y-1][x] == 4 or matrix[y-1][x] == 5)
                        {
                                GhostP[i].sprite.move(0,-30);
                            GhostP[i].jg--;
                        }

                        else
                        {
                             direction = rand()%4+1;
                        }
            }


        if( direction == 3 )
             {
                 if(matrix[y+1][x]== 0 or matrix[y+1][x] == 2 or matrix[y+1][x] == 4)
                       {
                            GhostP[i].sprite.move(0,30);
                            GhostP[i].jg++;
                        }

                        else
                        {
                             direction = rand()%4+1;
                        }
            }

}

         window.clear();
         Board(window,matrix);
         Score(window,scorecounter,text);
         timer(window, scatter);
         window.draw(pacman);
         window.draw(mouth);
         for(int g = 0 ; g < 4; g++)
         {
             GhostP[g].Build(window);
         }
         window.display();
    }
}
}


void Board (RenderWindow &window, int matrix[31][28])
{
    RectangleShape tile(Vector2f(30,30));

    CircleShape dot(2.f);
    dot.setFillColor(Color::Yellow);

    CircleShape powerPellet(5.f);
    powerPellet.setFillColor(Color::Yellow);
       for(int i = 0; i < 31; i++)
       {
            for (int j = 0; j < 28; j++)
            {
                tile.setPosition(j*30,i*30);
                powerPellet.setPosition((j*30)+9,(i*30)+9);

                    if (matrix[i][j] == 2)
                    {
                        tile.setFillColor(Color::Black);
                        window.draw(tile);
                        window.draw(powerPellet);
                    }
                    if (matrix[i][j] == 1)
                    {
                        tile.setFillColor(Color::Blue);
                        window.draw(tile);
                    }

                    if (matrix[i][j] == 0)
                    {
                         tile.setFillColor(Color::Black);
                         dot.setPosition((j*30)+11,(i*30)+12);
                         window.draw(tile);
                         window.draw(dot);
                    }
                    if (matrix[i][j] == 3 or matrix[i][j] == 4)
                    {
                        tile.setFillColor(Color::Black);
                        window.draw(tile);
                    }
            }
        }
}

void Score (RenderWindow &window, int scorecounter, Text &text)
{
    string score;
    stringstream q;
    q << scorecounter;
    score = q.str();

    text.setString(score);
    window.draw(text);

Font font;
    if (!font.loadFromFile("AGENCYB.TTF"))
       cout << "error loading font\n" ;

    Text text2;
    text2.setFont(font);
    text2.setCharacterSize(45);
    text2.setColor(Color::Magenta);
    text2.setString("YOU WIN!!!!!!");
    text2.setPosition(420,465);

    if (scorecounter == 3100)
    {
        //window.clear(Color::Magenta);
        window.draw(text2);
        //window.display();
    }
}

void Ghosts::Build(RenderWindow &window)
{
    Texture texture;
if (!texture.loadFromFile("Grayghost.png"))
{
    // error...
}

sprite.setTexture(texture);
sprite.setColor(Color(r,g,b));
sprite.setPosition(Vector2f(ig*30,jg*30 )); // absolute position
sprite.setScale(Vector2f(.1,.1)); // absolute scale factor


window.draw(sprite);

}
void timer(RenderWindow &window, bool scatter)
{
Clock clock; // starts the clock

Time elapsed = clock.getElapsedTime();
cout << elapsed.asSeconds() << endl;


if(elapsed.asSeconds() <= 7 )
{
    scatter = true;
}
if(elapsed.asSeconds() > 7 && elapsed.asSeconds() <= 27 )
{
    scatter = false;
}
if(elapsed.asSeconds() > 27 && elapsed.asSeconds() <= 34)
{
    scatter = true;
}
if(elapsed.asSeconds() > 34 && elapsed.asSeconds() <= 54 )
{
    scatter = false;
}
if(elapsed.asSeconds() > 54 && elapsed.asSeconds() <= 59)
{
    scatter = true;
}
if(elapsed.asSeconds() > 59)
{
    scatter = false;
}

//clock.restart();
//sf::Time elapsed2 = clock.getElapsedTime();
//std::cout << elapsed2.asSeconds() << std::endl;

//Scatter for 7 seconds, then Chase for 20 seconds.
//Scatter for 7 seconds, then Chase for 20 seconds.
//Scatter for 5 seconds, then Chase for 20 seconds.
//Scatter for 5 seconds, then switch to Chase mode permanently.
}

